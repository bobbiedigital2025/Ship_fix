import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Badge } from '../ui/badge';
import { Progress } from '../ui/progress';
import { ScrollArea } from '../ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';
import BrandForm from './BrandForm';
import { 
  Bot, 
  User, 
  Send, 
  CheckCircle, 
  Truck, 
  Package, 
  MapPin,
  Heart,
  DollarSign,
  Star,
  Zap,
  Shield,
  TrendingUp,
  Globe,
  Crown,
  Settings,
  CreditCard,
  BarChart3,
  Headphones,
  Palette,
  Building2,
  Eye
} from 'lucide-react';

interface BrandData {
  name: string;
  mission: string;
  colors: string;
  logoIdea: string;
  tagline: string;
  niche: string;
  targetAudience: string;
}

interface ChatMessage {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  actionButtons?: ActionButton[];
}

interface ActionButton {
  text: string;
  action: string;
  variant?: 'default' | 'outline' | 'premium';
}

interface CustomerData {
  setupComplete: boolean;
  subscription: 'free' | 'pro' | 'enterprise';
  monthlyShipments: number;
  businessType: string;
  currentPlan: string;
}

// Ship_fix Knowledge Base for AI Agent
const SHIPFIX_KNOWLEDGE = {
  features: {
    free: ['Basic shipping tracking', 'Up to 50 shipments/month', 'Email notifications', 'Simple dashboard'],
    pro: ['Advanced analytics', 'Up to 1000 shipments/month', 'AI route optimization', 'Tariff monitoring', 'Priority support', 'Custom alerts'],
    enterprise: ['Unlimited shipments', 'Full AI automation', 'Custom integrations', 'Dedicated account manager', 'White-label options', 'SLA guarantee']
  },
  pricing: {
    free: '$0/month',
    pro: '$49/month', 
    enterprise: '$299/month'
  },
  upsells: {
    free_to_pro: 'Upgrade to Pro for AI-powered route optimization and save up to 30% on shipping costs!',
    pro_to_enterprise: 'Scale to Enterprise for unlimited automation and dedicated support!'
  }
};

const SmartAIAgent: React.FC = () => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [customerData, setCustomerData] = useState<CustomerData>({
    setupComplete: false,
    subscription: 'free',
    monthlyShipments: 0,
    businessType: '',
    currentPlan: 'Free Plan'
  });
  const [setupStep, setSetupStep] = useState(-1); // -1 means not in setup flow
  const [setupAnswers, setSetupAnswers] = useState<string[]>([]);
  const [currentView, setCurrentView] = useState<'chat' | 'brand-form' | 'brand-preview'>('chat');
  const [brandData, setBrandData] = useState<Partial<BrandData>>({});
  const [brandAnalysisMode, setBrandAnalysisMode] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // AI Agent introduction
    const welcomeMessage: ChatMessage = {
      id: '1',
      type: 'ai',
      content: "👋 Hi! I'm your Ship_fix AI Assistant! I can help you:\n\n🚀 Set up your shipping platform\n💡 Answer questions about features\n💳 Help with billing and upgrades\n⚙️ Customize your settings\n🎨 Build your brand identity\n📞 Provide support\n\nWhat would you like to do today?",
      timestamp: new Date(),
      actionButtons: [
        { text: "🚀 Set Up My Platform", action: "setup" },
        { text: "🎨 Have Your Own Brand Info? Just Need a Little Help? Click Here", action: "brand_fasttrack", variant: 'premium' },
        { text: "💡 Learn About Features", action: "features" },
        { text: "💳 View Pricing & Upgrades", action: "pricing" },
        { text: "❓ Ask a Question", action: "question" }
      ]
    };
    setMessages([welcomeMessage]);
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const startBrandFastTrack = () => {
    setBrandAnalysisMode(true);
    setCurrentView('brand-form');
    addAIMessage("🎨 **Perfect! Let's get your brand dialed in!**\n\nI see you already have some brand ideas. Let's capture what you know and I'll help fill in any gaps with targeted questions.\n\n📝 **Fill out the form on the right** with whatever brand information you already have. Leave blank any fields you're unsure about - I'll analyze what's missing and ask smart follow-up questions!\n\n✨ **Aura Analysis**: As you fill out the form, I'll provide real-time feedback to ensure all your brand components work together harmoniously.", [
      { text: "📝 Open Brand Form", action: "show_brand_form" },
      { text: "👁️ Preview Mode", action: "show_brand_preview" },
      { text: "💬 Back to Chat", action: "back_to_chat" }
    ]);
  };

  const handleBrandFieldUpdate = (field: keyof BrandData, value: string) => {
    setBrandData(prev => ({ ...prev, [field]: value }));
    
    // Real-time analysis trigger
    if (value.trim()) {
      setTimeout(() => {
        provideBrandFeedback(field, value);
      }, 1000);
    }
  };

  const provideBrandFeedback = (field: keyof BrandData, value: string) => {
    const feedbackMap = {
      name: `Great choice for "${value}"! This name feels ${value.length > 10 ? 'comprehensive and professional' : 'concise and memorable'}.`,
      mission: `Your mission "${value}" ${value.includes('sustainable') || value.includes('eco') ? 'shows strong environmental awareness' : 'has a clear focus'}. This will resonate well with your audience.`,
      colors: `Color palette "${value}" ${value.includes('green') ? 'suggests growth and harmony' : value.includes('blue') ? 'conveys trust and reliability' : 'creates a distinctive visual identity'}.`,
      logoIdea: `Logo concept "${value}" sounds ${value.includes('modern') || value.includes('tech') ? 'contemporary and innovative' : 'creative and memorable'}!`,
      tagline: `Tagline "${value}" is ${value.length < 50 ? 'punchy and memorable' : 'descriptive and informative'} - perfect for ${value.includes('!') ? 'energetic marketing' : 'professional communications'}.`,
      niche: `Market niche "${value}" is ${value.includes('sustainable') || value.includes('eco') ? 'aligned with current market trends' : 'well-defined and focused'}.`,
      targetAudience: `Target audience "${value}" shows ${value.includes('millennial') || value.includes('gen') ? 'demographic clarity' : 'good market understanding'}.`
    };

    const feedback = feedbackMap[field] || `Great input for ${field}!`;
    addAIMessage(`✨ **Real-time Analysis**: ${feedback}\n\n💡 Keep going - I'm watching for consistency across all your brand elements!`);
  };

  const handleBrandFormSubmit = (data: BrandData) => {
    setBrandData(data);
    analyzeBrandGaps(data);
  };

  const analyzeBrandGaps = (data: BrandData) => {
    const emptyFields = Object.entries(data).filter(([_, value]) => !value || value.trim() === '');
    const filledFields = Object.entries(data).filter(([_, value]) => value && value.trim() !== '');
    
    if (emptyFields.length === 0) {
      addAIMessage(`🎉 **Amazing! Your brand is 100% complete!**\n\n✨ All brand components are filled out and working together beautifully.\n\nHere's your complete brand summary:\n\n${filledFields.map(([key, value]) => `**${key.charAt(0).toUpperCase() + key.slice(1)}**: ${value}`).join('\n')}\n\n🚀 Ready to launch your brand identity!`, [
        { text: "🎨 View Full Preview", action: "show_brand_preview" },
        { text: "📋 Export Brand Guide", action: "export_brand" },
        { text: "🔄 Make Adjustments", action: "edit_brand" }
      ]);
    } else {
      const fieldNames = {
        name: 'Brand Name',
        mission: 'Mission Statement', 
        colors: 'Brand Colors',
        logoIdea: 'Logo Concept',
        tagline: 'Tagline',
        niche: 'Market Niche',
        targetAudience: 'Target Audience'
      };

      addAIMessage(`📊 **Brand Analysis Complete!**\n\n✅ **Completed**: ${filledFields.length} fields\n❓ **Missing**: ${emptyFields.length} fields\n\n🎯 Let me ask targeted questions about the missing pieces:\n\n${emptyFields.map(([key, _]) => `• ${fieldNames[key as keyof typeof fieldNames]}`).join('\n')}\n\nShall I start with targeted questions to fill these gaps?`, [
        { text: "🎯 Yes, Ask Me Questions", action: "start_brand_questions" },
        { text: "📝 I'll Fill Them Myself", action: "show_brand_form" },
        { text: "👁️ Preview What I Have", action: "show_brand_preview" }
      ]);
    }
  };

  const startBrandQuestions = () => {
    const emptyFields = Object.entries(brandData).filter(([_, value]) => !value || value.trim() === '');
    if (emptyFields.length > 0) {
      const [field, _] = emptyFields[0];
      askBrandQuestion(field as keyof BrandData);
    }
  };

  const askBrandQuestion = (field: keyof BrandData) => {
    const questions = {
      name: "What would you like to call your brand? Think of something memorable that reflects your business...",
      mission: "What's your brand's core purpose? What problem do you solve or value do you provide?",
      colors: "What colors feel right for your brand? Think about the emotions you want to evoke...",
      logoIdea: "Describe your ideal logo. What visual elements would represent your brand?",
      tagline: "What's a catchy phrase that captures your brand's essence? Something memorable customers will remember...",
      niche: "What specific market or industry do you serve? Be as specific as possible...",
      targetAudience: "Who is your ideal customer? Describe their demographics, interests, and needs..."
    };

    addAIMessage(`🎯 **Let's fill in your ${field}:**\n\n${questions[field]}\n\nTake your time and give me your thoughts!`);
  };

  const addAIMessage = (content: string, actionButtons?: ActionButton[]) => {
    const message: ChatMessage = {
      id: Date.now().toString(),
      type: 'ai',
      content,
      timestamp: new Date(),
      actionButtons
    };
    setMessages(prev => [...prev, message]);
  };

  const addUserMessage = (content: string) => {
    const message: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, message]);
  };

  const handleActionButton = (action: string) => {
    // Setup flow: answer button logic
    if (setupStep >= 0 && action.startsWith('setup_answer_')) {
      // Parse step and answer from action string
      const parts = action.split('_');
      const step = parseInt(parts[2], 10);
      const answer = parts.slice(3).join('_');
      handleSetupAnswer(step, answer);
      return;
    }
    // Prevent other action buttons during setup flow
    if (setupStep >= 0) return;
    switch (action) {
      case 'setup':
        setSetupStep(0);
        setSetupAnswers([]);
        askSetupQuestion(0);
        break;
      case 'brand_fasttrack':
        startBrandFastTrack();
        break;
      case 'features':
        showFeatures();
        break;
      case 'pricing':
        showPricing();
        break;
      case 'upgrade_pro':
        handleUpgrade('pro');
        break;
      case 'upgrade_enterprise':
        handleUpgrade('enterprise');
        break;
      case 'question':
        addAIMessage("Great! What would you like to know? I can help with:\n\n• How features work\n• Setup and configuration\n• Billing questions\n• Technical support\n• Best practices\n\nJust type your question below! 😊");
        break;
      case 'show_brand_form':
        setCurrentView('brand-form');
        break;
      case 'show_brand_preview':
        setCurrentView('brand-preview');
        break;
      case 'back_to_chat':
        setCurrentView('chat');
        break;
      case 'start_brand_questions':
        startBrandQuestions();
        break;
      default:
        break;
    }
  };

  const setupQuestions = [
    {
      question: "What type of business do you have?",
      choices: ["Online Store", "Manufacturer", "Wholesaler", "Retailer", "Other"],
    },
    {
      question: "Where do you ship FROM most of the time? (City or country)",
      choices: null,
    },
    {
      question: "Where do you ship TO?",
      choices: ["Same Country", "International", "North America", "Europe", "Asia", "Everywhere"],
    },
    {
      question: "What do you sell? (Just a few words)",
      choices: null,
    },
    {
      question: "How many packages do you ship per month?",
      choices: ["1-50", "51-200", "201-1000", "1000+", "Not sure"],
    },
    {
      question: "What's your biggest shipping headache right now?",
      choices: ["Costs too much", "Takes too long", "Things get lost", "Customs problems", "Hard to track", "All of the above!"],
    },
  ];

  // Handle setup answer
  const handleSetupAnswer = (step: number, answer: string) => {
    setSetupAnswers(prev => {
      const updated = [...prev];
      updated[step] = answer;
      return updated;
    });
    addUserMessage(answer);
    setTimeout(() => {
      setSetupStep(step + 1);
      askSetupQuestion(step + 1);
    }, 600);
  };

  // Ask a setup question
  const askSetupQuestion = (step: number) => {
    if (step < setupQuestions.length) {
      const q = setupQuestions[step];
      addAIMessage(q.question, q.choices ? q.choices.map(c => ({ text: c, action: `setup_answer_${step}_${c}` })) : undefined);
    } else {
      finishSetup();
    }
  };

  // Finish setup
  const finishSetup = () => {
    addAIMessage("🎉 All done! Your Ship_fix platform is set up for your needs. You can now start shipping and optimizing! 🚀");
    setSetupStep(-1);
  };
  };

  const startSetupFlow = () => {
    addAIMessage("Perfect! Let's get your shipping platform set up. I'll ask you a few super simple questions:\n\n🏢 **Step 1:** What type of business do you have?", [
      { text: "🛒 Online Store", action: "business_ecommerce" },
      { text: "🏭 Manufacturer", action: "business_manufacturer" },
      { text: "📦 Wholesaler", action: "business_wholesaler" },
      { text: "🏪 Retailer", action: "business_retailer" },
      { text: "🔧 Other", action: "business_other" }
    ]);
  };

  const showFeatures = () => {
    const currentFeatures = SHIPFIX_KNOWLEDGE.features[customerData.subscription];
    const nextTier = customerData.subscription === 'free' ? 'pro' : 'enterprise';
    const nextFeatures = SHIPFIX_KNOWLEDGE.features[nextTier];

    addAIMessage(`**Your Current Plan (${customerData.currentPlan}):**\n${currentFeatures.map(f => `✅ ${f}`).join('\n')}\n\n**Available in ${nextTier.toUpperCase()}:**\n${nextFeatures.map(f => `⭐ ${f}`).join('\n')}`, [
      { text: `🚀 Upgrade to ${nextTier.toUpperCase()}`, action: `upgrade_${nextTier}`, variant: 'premium' },
      { text: "📞 Talk to Sales", action: "contact_sales" },
      { text: "📚 Learn More", action: "learn_more" }
    ]);
  };

  const showPricing = () => {
    addAIMessage(`**💰 Ship_fix Pricing Plans:**\n\n**🆓 FREE PLAN - ${SHIPFIX_KNOWLEDGE.pricing.free}**\n${SHIPFIX_KNOWLEDGE.features.free.map(f => `• ${f}`).join('\n')}\n\n**⭐ PRO PLAN - ${SHIPFIX_KNOWLEDGE.pricing.pro}**\n${SHIPFIX_KNOWLEDGE.features.pro.map(f => `• ${f}`).join('\n')}\n\n**👑 ENTERPRISE - ${SHIPFIX_KNOWLEDGE.pricing.enterprise}**\n${SHIPFIX_KNOWLEDGE.features.enterprise.map(f => `• ${f}`).join('\n')}\n\n**💡 Pro Tip:** Most customers save 30%+ on shipping costs with Pro!`, [
      { text: "🚀 Try Pro FREE for 14 days", action: "upgrade_pro", variant: 'premium' },
      { text: "👑 Get Enterprise Demo", action: "upgrade_enterprise", variant: 'premium' },
      { text: "💬 Chat with Sales", action: "contact_sales" }
    ]);
  };

  const handleUpgrade = (plan: string) => {
    if (plan === 'pro') {
      addAIMessage(`🎉 **Excellent choice!** Pro Plan includes:\n\n✨ AI route optimization (save 30% on costs)\n📊 Advanced analytics dashboard\n🚨 Real-time tariff alerts\n📞 Priority support\n🔄 Up to 1000 shipments/month\n\n**Special Offer: 14-day FREE trial!**\n\nShould I activate your Pro trial now?`, [
        { text: "✅ Yes, Start My Trial!", action: "activate_pro_trial", variant: 'premium' },
        { text: "📞 Talk to Sales First", action: "contact_sales" },
        { text: "📋 See Full Feature List", action: "features" }
      ]);
    } else {
      addAIMessage(`👑 **Enterprise is perfect for scaling!** You'll get:\n\n🚀 Unlimited shipments\n🤖 Full AI automation\n🔗 Custom integrations\n👨‍💼 Dedicated account manager\n🏷️ White-label options\n📞 24/7 premium support\n\nLet me connect you with our Enterprise team for a custom demo!`, [
        { text: "📅 Schedule Demo", action: "schedule_demo", variant: 'premium' },
        { text: "💬 Chat with Enterprise Sales", action: "enterprise_sales" },
        { text: "📊 Get Custom Quote", action: "custom_quote" }
      ]);
    }
  };

  const addAIMessage = (content: string, actionButtons?: ActionButton[]) => {
    const message: ChatMessage = {
      id: Date.now().toString(),
      type: 'ai',
      content,
      timestamp: new Date(),
      actionButtons
    };
    setMessages(prev => [...prev, message]);
  };

  const addUserMessage = (content: string) => {
    const message: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, message]);
  };

  const handleAIResponse = async (userInput: string) => {
    setIsLoading(true);
    
    // Simulate AI processing
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Smart responses based on keywords
    let response = "";
    let actionButtons: ActionButton[] = [];

    const input = userInput.toLowerCase();
    
    if (input.includes('price') || input.includes('cost') || input.includes('billing')) {
      response = "💰 **Billing & Pricing Info:**\n\nYour current plan: **" + customerData.currentPlan + "**\n\nNeed to upgrade or have billing questions? I can help with:\n• Plan comparisons\n• Upgrade options\n• Invoice questions\n• Payment methods\n\nWhat specifically would you like to know?";
      actionButtons = [
        { text: "💳 View My Billing", action: "view_billing" },
        { text: "🚀 Upgrade Plan", action: "pricing" },
        { text: "📞 Billing Support", action: "billing_support" }
      ];
    } else if (input.includes('setup') || input.includes('configure')) {
      response = "⚙️ **Setup & Configuration:**\n\nI can help you:\n• Complete initial setup\n• Configure shipping routes\n• Set up automation rules\n• Connect your existing systems\n• Customize notifications\n\nWhat would you like to set up?";
      actionButtons = [
        { text: "🚀 Complete Setup", action: "setup" },
        { text: "🔗 Connect Systems", action: "integrations" },
        { text: "⚙️ Customize Settings", action: "settings" }
      ];
    } else if (input.includes('feature') || input.includes('what can')) {
      showFeatures();
      setIsLoading(false);
      return;
    } else if (input.includes('help') || input.includes('support')) {
      response = "🆘 **Support Options:**\n\nI'm here to help! You can:\n• Ask me any questions (I know everything about Ship_fix!)\n• Get technical support\n• Request feature help\n• Schedule a call with our team\n\nWhat do you need help with?";
      actionButtons = [
        { text: "🔧 Technical Support", action: "tech_support" },
        { text: "📞 Schedule Call", action: "schedule_call" },
        { text: "📚 Documentation", action: "docs" }
      ];
    } else {
      response = "I understand you're asking about: \"" + userInput + "\"\n\n🤖 As your Ship_fix AI agent, I can help with everything from setup to advanced features. Could you tell me more specifically what you'd like to know?\n\nPopular topics:\n• Setting up automation\n• Understanding pricing\n• Configuring notifications\n• Connecting your store\n• Optimizing routes";
      actionButtons = [
        { text: "🚀 Setup Help", action: "setup" },
        { text: "💰 Pricing Info", action: "pricing" },
        { text: "⚙️ Configuration", action: "settings" }
      ];
    }

    addAIMessage(response, actionButtons);
    setIsLoading(false);
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;
    if (setupStep >= 0) {
      // Setup flow: treat input as answer
      handleSetupAnswer(setupStep, inputValue.trim());
      setInputValue('');
      return;
    }
    addUserMessage(inputValue);
    const userInput = inputValue;
    setInputValue('');
    await handleAIResponse(userInput);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="w-full max-w-7xl mx-auto">
      {brandAnalysisMode ? (
        <Tabs value={currentView} onValueChange={(value) => setCurrentView(value as any)} className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="chat" className="flex items-center">
              <Bot className="h-4 w-4 mr-2" />
              Aura Chat
            </TabsTrigger>
            <TabsTrigger value="brand-form" className="flex items-center">
              <Building2 className="h-4 w-4 mr-2" />
              Brand Form
            </TabsTrigger>
            <TabsTrigger value="brand-preview" className="flex items-center">
              <Eye className="h-4 w-4 mr-2" />
              Live Preview
            </TabsTrigger>
          </TabsList>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
            <TabsContent value="chat" className="lg:col-span-2">
              <Card className="flex flex-col shadow-lg rounded-xl overflow-hidden" style={{ height: '70vh', background: '#fff' }}>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <div className="flex items-center">
                      <Palette className="h-5 w-5 mr-2 text-purple-600" />
                      <span>Aura - Brand Development AI</span>
                      <Badge variant="secondary" className="ml-2">Real-time Analysis</Badge>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline">{customerData.currentPlan}</Badge>
                      <Crown className="h-4 w-4 text-yellow-500" />
                    </div>
                  </CardTitle>
                  <CardDescription>
                    Your AI-powered brand development assistant with real-time consistency analysis
                  </CardDescription>
                </CardHeader>
                
                <CardContent className="flex-1 flex flex-col">
                  <div className="flex-1 overflow-y-auto px-2 pb-2" style={{ minHeight: 0 }}>
                    <div className="space-y-4">
                      {messages.map((message) => (
                        <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                          <div className={`max-w-[85%] ${
                            message.type === 'user' 
                              ? 'bg-purple-600 text-white' 
                              : 'bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200'
                          } rounded-lg p-4`}>
                            <div className="flex items-start space-x-3">
                              {message.type === 'ai' ? (
                                <Palette className="h-5 w-5 mt-0.5 flex-shrink-0 text-purple-600" />
                              ) : (
                                <User className="h-5 w-5 mt-0.5 flex-shrink-0" />
                              )}
                              <div className="flex-1">
                                <div className="whitespace-pre-line text-sm leading-relaxed">
                                  {message.content}
                                </div>
                                {message.actionButtons && (
                                  <div className="mt-3 flex flex-wrap gap-2">
                                    {message.actionButtons.map((button, idx) => (
                                      <Button
                                        key={idx}
                                        size="sm"
                                        variant={button.variant === 'premium' ? 'default' : 'outline'}
                                        className={button.variant === 'premium' ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white' : ''}
                                        onClick={() => handleActionButton(button.action)}
                                      >
                                        {button.text}
                                      </Button>
                                    ))}
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                      {isLoading && (
                        <div className="flex justify-start">
                          <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                            <div className="flex items-center space-x-3">
                              <Palette className="h-5 w-5 text-purple-600" />
                              <div className="flex space-x-1">
                                <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce"></div>
                                <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                                <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                    <div ref={messagesEndRef} />
                  </div>
                  
                  {/* Brand Chat Input */}
                  <div className="border-t pt-4">
                    <div className="flex space-x-2">
                      <Input
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="Tell me about your brand or ask for help..."
                        disabled={isLoading}
                        className="flex-1"
                      />
                      <Button 
                        onClick={handleSendMessage} 
                        disabled={isLoading || !inputValue.trim()}
                        size="icon"
                        className="bg-purple-600 hover:bg-purple-700"
                      >
                        <Send className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="brand-form" className="lg:col-span-1">
              <BrandForm
                onSubmit={handleBrandFormSubmit}
                onFieldUpdate={handleBrandFieldUpdate}
                initialData={brandData}
              />
            </TabsContent>

            <TabsContent value="brand-preview" className="lg:col-span-1">
              <BrandForm
                onSubmit={handleBrandFormSubmit}
                onFieldUpdate={handleBrandFieldUpdate}
                initialData={brandData}
                showPreview={true}
              />
            </TabsContent>

            {/* Always show chat in brand mode for context */}
            {currentView !== 'chat' && (
              <div className="lg:col-span-1">
                <Card className="h-full">
                  <CardHeader>
                    <CardTitle className="flex items-center text-sm">
                      <Palette className="h-4 w-4 mr-2 text-purple-600" />
                      Aura Analysis
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2 max-h-80 overflow-y-auto">
                      {messages.slice(-3).map((message) => (
                        message.type === 'ai' && (
                          <div key={message.id} className="bg-purple-50 border border-purple-200 rounded p-2 text-xs">
                            {message.content.slice(0, 150)}...
                          </div>
                        )
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}
          </div>
        </Tabs>
      ) : (
        <Card className="flex flex-col w-full max-w-xl mx-auto shadow-lg rounded-xl overflow-hidden" style={{ height: '100%', maxHeight: '90vh', minHeight: '350px', background: '#fff' }}>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center">
                <Bot className="h-5 w-5 mr-2 text-blue-600" />
                <span>Ship_fix AI Assistant</span>
                <Badge variant="secondary" className="ml-2">24/7 Support</Badge>
              </div>
              <div className="flex items-center space-x-2">
                <Badge variant="outline">{customerData.currentPlan}</Badge>
                <Crown className="h-4 w-4 text-yellow-500" />
              </div>
            </CardTitle>
            <CardDescription>
              Your AI-powered assistant for setup, support, billing, and upgrades
            </CardDescription>
          </CardHeader>
          
          <CardContent className="flex-1 flex flex-col">
            <div className="flex-1 overflow-y-auto px-2 pb-2" style={{ minHeight: 0, maxHeight: '60vh' }}>
              <div className="space-y-4">
                {messages.map((message) => (
                  <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-[85%] ${
                      message.type === 'user' 
                        ? 'bg-blue-600 text-white' 
                        : 'bg-gradient-to-r from-gray-50 to-gray-100 border'
                    } rounded-lg p-4`}>
                      <div className="flex items-start space-x-3">
                        {message.type === 'ai' ? (
                          <Bot className="h-5 w-5 mt-0.5 flex-shrink-0 text-blue-600" />
                        ) : (
                          <User className="h-5 w-5 mt-0.5 flex-shrink-0" />
                        )}
                        <div className="flex-1">
                          <div className="whitespace-pre-line text-sm leading-relaxed">
                            {message.content}
                          </div>
                          {/* Setup flow: show answer buttons only for current question */}
                          {setupStep >= 0 && message.actionButtons && messages[messages.length - 1].id === message.id && (
                            <div className="mt-3 flex flex-wrap gap-2">
                              {message.actionButtons.map((button, idx) => (
                                <Button
                                  key={idx}
                                  size="sm"
                                  variant={button.variant === 'premium' ? 'default' : 'outline'}
                                  className={button.variant === 'premium' ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white' : ''}
                                  onClick={() => {
                                    // Only allow answer for current setup step
                                    if (setupStep >= 0) handleSetupAnswer(setupStep, button.text);
                                  }}
                                >
                                  {button.text}
                                </Button>
                              ))}
                            </div>
                          )}
                          {/* Non-setup flow: show action buttons as before */}
                          {setupStep === -1 && message.actionButtons && (
                            <div className="mt-3 flex flex-wrap gap-2">
                              {message.actionButtons.map((button, idx) => (
                                <Button
                                  key={idx}
                                  size="sm"
                                  variant={button.variant === 'premium' ? 'default' : 'outline'}
                                  className={button.variant === 'premium' ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white' : ''}
                                  onClick={() => handleActionButton(button.action)}
                                >
                                  {button.text}
                                </Button>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                {isLoading && (
                  <div className="flex justify-start">
                    <div className="bg-gray-100 rounded-lg p-4 border">
                      <div className="flex items-center space-x-3">
                        <Bot className="h-5 w-5 text-blue-600" />
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
              <div ref={messagesEndRef} />
            </div>
            
            {/* Input Area */}
            <div className="border-t pt-4">
              <div className="flex space-x-2">
                <Input
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Ask me anything about Ship_fix - setup, features, billing, upgrades..."
                  disabled={isLoading}
                  className="flex-1"
                />
                <Button 
                  onClick={handleSendMessage} 
                  disabled={isLoading || !inputValue.trim()}
                  size="icon"
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  <Send className="h-4 w-4" />
                </Button>
              </div>
              
              {/* Quick Action Buttons */}
              <div className="flex flex-wrap gap-2 mt-3">
                <Button size="sm" variant="outline" onClick={() => handleActionButton('pricing')}>
                  💰 Pricing
                </Button>
                <Button size="sm" variant="outline" onClick={() => handleActionButton('features')}>
                  ⭐ Features
                </Button>
                <Button size="sm" variant="outline" onClick={() => handleActionButton('setup')}>
                  🚀 Setup
                </Button>
                <Button size="sm" variant="outline" onClick={() => handleActionButton('question')}>
                  ❓ Support
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SmartAIAgent;
